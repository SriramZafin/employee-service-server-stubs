/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wordnik.client.api

import com.wordnik.client.model.Employee
import com.wordnik.client.model.CouchDoc

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class EmployeeServiceReverseEngineeredRoutesApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "EmployeeServiceReverseEngineeredRoutesApi"
  override protected val applicationName: Option[String] = Some("//EmployeeServiceReverseEngineeredRoutes")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteEmployeeOperation = (apiOperation[Unit]("deleteEmployee")
      summary "Delete an employee"
      parameters(pathParam[String]("id").description(""))
  )

  delete("/employee/:id",operation(deleteEmployeeOperation)) {
    
    
      val id = params.getOrElse("id", halt(400))
    
    println("id: " + id)
  }

  

  val getAllEmployeeKindOperation = (apiOperation[Unit]("getAllEmployeeKind")
      summary "Get list of all employee type documents"
      parameters()
  )

  get("/employee",operation(getAllEmployeeKindOperation)) {
  }

  

  val getEmployeeByIDOperation = (apiOperation[Unit]("getEmployeeByID")
      summary "Get employee by ID"
      parameters(pathParam[String]("id").description(""))
  )

  get("/employee/:id",operation(getEmployeeByIDOperation)) {
    
    
      val id = params.getOrElse("id", halt(400))
    
    println("id: " + id)
  }

  

  val getEmployeesByBandOperation = (apiOperation[Unit]("getEmployeesByBand")
      summary "Get employees by band"
      parameters(pathParam[String]("band").description(""))
  )

  get("/employee/band/:band",operation(getEmployeesByBandOperation)) {
    
    
      val band = params.getOrElse("band", halt(400))
    
    println("band: " + band)
  }

  

  val postEmployeeOperation = (apiOperation[List[CouchDoc]]("postEmployee")
      summary "Create new employee"
      parameters(bodyParam[Employee]("employee").description(""))
  )

  post("/employee",operation(postEmployeeOperation)) {
    
    
          val employee = parsedBody.extract[Employee]

    println("employee: " + employee)
  }

  

  val postEmployee_1Operation = (apiOperation[Unit]("postEmployee_1")
      summary "Update new employee"
      parameters(pathParam[String]("id").description(""), bodyParam[Employee]("employee").description(""))
  )

  put("/employee/:id",operation(postEmployee_1Operation)) {
    
    
      val id = params.getOrElse("id", halt(400))
    
    println("id: " + id)
    
    
          val employee = parsedBody.extract[Employee]

    println("employee: " + employee)
  }

}
